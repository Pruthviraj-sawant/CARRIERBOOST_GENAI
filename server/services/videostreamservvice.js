// // backend/services/googleGeminiService.js
// const axios = require('axios');
// const { GEMINI_API_KEY } = require('../config/geminiConfig');  // Load API key

// const googleGeminiAPI = axios.create({
//   baseURL: `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,  // Replace with actual Gemini API URL
//   headers: {
//     'Content-Type': 'application/json',
//   },
// });

// const generateQuestion = async (previousAnswer) => {
//   try {
//     const response = await googleGeminiAPI.post('/generateQuestion', {
//       prompt: `Generate a relevant interview question based on the following answer: ${previousAnswer}`,
//     });
//     return response.data.question;
//   } catch (error) {
//     console.error('Error getting interview question:', error);
//     throw new Error('Failed to fetch interview question.');
//   }
// };

// module.exports = { generateQuestion };
// const axios = require('axios');
// const { GEMINI_API_KEY } = require('../config/geminiConfig'); // Make sure your API key is stored properly

// const generateQuestion = async (previousAnswer) => {
//   const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`;
  
//   const requestData = {
//     contents: [{
//       parts: [{
//         text: `Generate a relevant interview question based on the following answer: ${previousAnswer}`
//       }]
//     }]
//   };

//   try {
//     const response = await axios.post(API_URL, requestData);
//     console.log(response.data);
//     // Extract generated content from the response properly
//     const generatedText = response.data.candidates?.[0]?.content?.parts?.[0]?.text || '';
//     return generatedText;
//   } catch (error) {
//     console.error('Error in Google Gemini API:', error.response?.data || error.message);
//     throw new Error('Failed to fetch interview question.');
//   }
// };

// module.exports = { generateQuestion };
// backend/services/videoStreamService.js
const axios = require('axios');
const { GEMINI_API_KEY } = require('../config/geminiConfig');

const generateQuestion = async (previousAnswer) => {
  const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`;

  const requestData = {
    contents: [
      {
        parts: [
          {
            text: `Based on the given answer,  generate ONLY one interview question. 
Do NOT provide any explanation, elaboration, or reasoning. Only the question on : "${previousAnswer}"`
          }
        ]
      }
    ]
  };

  try {
    const response = await axios.post(API_URL, requestData);

    // Safely access generated text
    const generatedText = response.data?.candidates?.[0]?.content?.parts?.[0]?.text || '';

    if (!generatedText) {
      throw new Error('No question generated by Gemini.');
    }

    return generatedText.trim();
  } catch (error) {
    console.error('Error while calling Gemini API:', error.response?.data || error.message);
    throw new Error('Failed to generate interview question.');
  }
};

module.exports = { generateQuestion };
